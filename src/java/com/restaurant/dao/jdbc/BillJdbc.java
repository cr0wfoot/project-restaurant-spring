package com.restaurant.dao.jdbc;

import com.restaurant.dao.BillDao;
import com.restaurant.model.Bill;
import com.restaurant.model.search.criteria.BillSearchCriteria;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

/**
 * JDBC class works with entity Bill
 * @see Bill
 */
@Repository
public class BillJdbc implements BillDao {

    /**
     * Spring jdbc template to execute queries
     */
    private JdbcTemplate jdbcTemplate;
    
    /**
     * Spring named jdbc template to execute queries with named parameters
     */
    private NamedParameterJdbcTemplate namedTemplate;
    
    /**
     * Initialize fields {@link BillJdbc#jdbcTemplate}, {@link BillJdbc#namedTemplate}
     * @param dataSource 
     * an object of sql data source
     */
    @Autowired
    @Qualifier("dataSource")
    public void setDataSource(DataSource dataSource) {
        this.jdbcTemplate  = new JdbcTemplate(dataSource);
        this.namedTemplate = new NamedParameterJdbcTemplate(dataSource);
    }
    
    /**
     * Maps all fields of entity Bill in a row
     */
    private RowMapper<Bill> rowMapper = new RowMapper<Bill>() {
        @Override
        public Bill mapRow(ResultSet rs, int rowNum) throws SQLException {
            Bill bill = new Bill();
            bill.setId    ( rs.getInt   ( "id"      ) );
            bill.setPrice ( rs.getDouble( "total"   ) );
            bill.setUserId( rs.getInt   ( "id_user" ) );
            bill.setInfo  ( rs.getString( "info"    ) );
            return bill;
        }       
    };
    
    /**
     * Creates prepared statement with autogenerated fields
     * @param sql
     * sql statement
     * @param ingredient
     * an object of class Ingredient
     * @return 
     * prepared statement creator
     */
    private PreparedStatementCreator getPreparedStatementCreator(final Bill bill, final String sql) {
        return new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                PreparedStatement ps = con.prepareStatement(sql);
                int i = 0;
                ps.setDouble( ++i, bill.getPrice()   );
                ps.setInt   ( ++i, bill.getUserId()  );
                ps.setString( ++i, bill.getInfo()    );
                return ps;
            }
        };
    }
    
    /**
     * Creates prepared statement
     * @param ingredient
     * an object of class Ingredient
     * @return 
     * prepared statement setter
     */
    private PreparedStatementSetter getPreparedStatementSetter(final Bill bill) {
        return new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                int i = 0;
                ps.setDouble( ++i, bill.getPrice()   );
                ps.setInt   ( ++i, bill.getUserId()  );
                ps.setInt   ( ++i, bill.getId()      );
                ps.setString( ++i, bill.getInfo()    );
            }           
        };
    }
    
    @Override
    public void insert(Bill bill) {
        String sql = "INSERT INTO bills(total, id_user, info) VALUES(? , ? , ?)";
        KeyHolder key = new GeneratedKeyHolder();
        jdbcTemplate.update(getPreparedStatementCreator(bill, sql), key);
    }

    @Override
    public Bill select(Integer id) {
        String sql = "SELECT * FROM bills WHERE id=?";
        return jdbcTemplate.queryForObject(sql, rowMapper, id);
    }

    @Override
    public List<Bill> selectAll() {
        String sql = "SELECT * FROM bills";
        return jdbcTemplate.query(sql, rowMapper);
    }

    @Override
    public void update(Bill bill) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void delete(Integer id) {
        String sql = "DELETE FROM bills WHERE id=?";
        jdbcTemplate.update(sql, id);
    }

    @Override
    public List<Bill> findByCriteria(BillSearchCriteria criteria) {
        if(criteria.isEmpty())
            return selectAll();
        String sql = "SELECT * FROM bills WHERE true";
        if(criteria.getUserId() != null)
            sql += " AND bills.id_user=:userId";
        if(criteria.getMinPrice() != null)
            sql += " AND bills.price>:minPrice";
        if(criteria.getMaxPrice() != null)
            sql += " AND bills.price<:maxPrice";
        BeanPropertySqlParameterSource namedParameters = new BeanPropertySqlParameterSource(criteria);
        return namedTemplate.query(sql, namedParameters, rowMapper);
    }
    
}
